@startuml

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

legend top
    __Colors legend__ :
    * <back:#fefece>Public API (for client application)</back>
    * <back:lightBlue>Private adapters</back>
    * <back:plum>Keyple internal API</back>
end legend

package "Common API\norg.eclipse.keyple.core.common" as commonApi {
    +interface KeyplePluginExtensionFactory {
    }
    +interface KeyplePluginExtension {
    }
    +interface KeypleReaderExtension {
    }
}

package "Plugin API\norg.eclipse.keyple.core.plugin.spi" as pluginSpi {
    +interface ReaderSpi {
        --
        ...
    }
    +interface PluginSpi {
        --
        ...
    }
    +interface PluginFactorySpi {
        --
        ...
    }
}

package "Plugin xxx\norg.eclipse.keyple.plugin.xxx" as specificPluginApi {
    +class "**final** xxxPluginFactoryProvider" as xxxPluginFactoryProvider {
        +{static} xxxPluginFactory getFactory ()
    }
    together {
        +interface xxxPluginFactory extends KeyplePluginExtensionFactory {
            --
            custom settings... (optional)
        }
        +interface xxxPlugin extends KeyplePluginExtension {
            --
            custom settings... (optional)
        }
        +interface xxxReader extends KeypleReaderExtension {
            --
            custom settings... (optional)
        }
        ' Adapters
        ~class "**final** xxxPluginFactoryAdapter" as xxxPluginFactoryAdapter implements xxxPluginFactory, PluginFactorySpi {
            --
            ...
        }
        ~class "**final** xxxPluginAdapter" as xxxPluginAdapter implements xxxPlugin, PluginSpi {
            --
            ...
        }
        ~class "**final** xxxReaderAdapter" as xxxReaderAdapter implements xxxReader, ReaderSpi {
            --
            ...
        }
    }
}

' Associations

xxxPluginFactoryProvider ..> xxxPluginFactoryAdapter #C_LINK : provide >
xxxPluginFactoryAdapter .> xxxPluginAdapter #C_LINK : provide >
xxxPluginAdapter .> xxxReaderAdapter #C_LINK : provide >

' == LAYOUT ==

commonApi -[hidden]- specificPluginApi
xxxPluginFactoryAdapter -[hidden]- PluginFactorySpi
xxxReaderAdapter -[hidden]- ReaderSpi
xxxPluginAdapter -[hidden]- PluginSpi

' == STYLE ==

package commonApi #C_GREY1 {}
package pluginSpi #C_GREY1 {}
package specificPluginApi #C_GREY1 {}

class xxxReaderAdapter <<blue>>
class xxxPluginAdapter <<blue>>
class xxxPluginFactoryAdapter <<blue>>
interface ReaderSpi <<purple>>
interface PluginSpi <<purple>>
interface PluginFactorySpi <<purple>>

@enduml