<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer guides | Eclipse Keyple</title><link>https://keyple.org/learn/developer-guide/</link><atom:link href="https://keyple.org/learn/developer-guide/index.xml" rel="self" type="application/rss+xml"/><description>Developer guides</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020-2021 The Eclipse Keyple® project. All Rights Reserved.</copyright><image><url>https://keyple.org/images/logo_hu673a59176cd62c570f44ed2728665b48_42188_300x300_fit_lanczos_3.png</url><title>Developer guides</title><link>https://keyple.org/learn/developer-guide/</link></image><item><title>Reader Plugin Add-on Developer Guide</title><link>https://keyple.org/learn/developer-guide/reader-plugin-add-on/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/developer-guide/reader-plugin-add-on/</guid><description>&lt;hr>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This page is intended for developers who want to create a Keyple plugin for a specific device.
It presents step by step the necessary steps depending on the characteristics of the reader.&lt;/p>
&lt;hr>
&lt;h2 id="operating-mode">Operating mode&lt;/h2>
&lt;ol>
&lt;li>Learn the
&lt;a href="#plugin-architecture">plugin architecture&lt;/a> concepts&lt;/li>
&lt;li>
&lt;a href="#select-predefined-features">Select the predefined features&lt;/a> that meet your need&lt;/li>
&lt;li>
&lt;a href="#define-specific-features">Define specific features&lt;/a> (optional)&lt;/li>
&lt;li>
&lt;a href="#implement-the-solution">Implement the solution&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="plugin-architecture">Plugin architecture&lt;/h2>
&lt;p>A Keyple reader plugin consists of three objects, a &lt;strong>plugin factory&lt;/strong>, a &lt;strong>plugin&lt;/strong> and a &lt;strong>reader&lt;/strong>, which meet the following two interface specifications:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Common API&lt;/strong>: public contract containing only generic types common to all plugins.&lt;/li>
&lt;li>&lt;strong>Plugin API&lt;/strong>: private contract based on two types of interfaces:
&lt;ul>
&lt;li>&lt;strong>API&lt;/strong> (Application Programming Interface): interface implemented by Keyple Service directly usable by the plugin code.&lt;/li>
&lt;li>&lt;strong>SPI&lt;/strong> (Service Provider Interface): interface to be implemented by the plugin and directly used by Keyple Service.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The component diagram below illustrates the internal API/SPI links between the plugin and Keyple Service, as well as the public APIs exposed to the client application:
&lt;figure >
&lt;a data-fancybox="" href="../../media/learn/developer-guide/component-dependencies/plugin_api.svg" >
&lt;img src="../../media/learn/developer-guide/component-dependencies/plugin_api.svg" alt="" >
&lt;/a>
&lt;/figure>
&lt;/p>
&lt;hr>
&lt;h2 id="select-predefined-features">Select predefined features&lt;/h2>
&lt;p>The diagram below helps you to determine exactly which interfaces to implement according to the characteristics of the reader:
&lt;figure >
&lt;a data-fancybox="" href="../../media/learn/developer-guide/design-guides/develop_a_reader_plugin_activity_diagram.svg" >
&lt;img src="../../media/learn/developer-guide/design-guides/develop_a_reader_plugin_activity_diagram.svg" alt="" >
&lt;/a>
&lt;/figure>
&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
The &lt;code>XxxPluginFactory&lt;/code>, &lt;code>XxxPlugin&lt;/code> and &lt;code>XxxReader&lt;/code> interfaces must be created.
They are specific to the plugin &lt;code>Xxx&lt;/code> to be created but can remain empty if there is no specific feature.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="define-specific-features">Define specific features&lt;/h2>
&lt;p>Depending on the characteristics of the reader, it may be necessary to add in the specific APIs configuration methods appropriate to the technical context.&lt;/p>
&lt;p>These features can be exposed at three levels:&lt;/p>
&lt;ul>
&lt;li>In the &lt;strong>plugin factory&lt;/strong> (&lt;code>XxxPluginFactory&lt;/code> interface), for the initial configuration of the plugin (e.g. set custom plugin name).&lt;/li>
&lt;li>In the &lt;strong>plugin&lt;/strong> (&lt;code>XxxPlugin&lt;/code> interface), for dynamic configurations that can be applied to all the readers (e.g. put the readers in sleep mode).&lt;br>
The API will then be directly accessible from the client application through the &lt;code>getExtension(...)&lt;/code> method of the plugin registered with Keyple Service.&lt;/li>
&lt;li>In the &lt;strong>reader&lt;/strong> (&lt;code>XxxReader&lt;/code> interface), for dynamic configurations specific to each reader (e.g. activate/deactivate a LED).&lt;br>
The API will then be directly accessible from the client application through the &lt;code>getExtension(...)&lt;/code> method of the reader provided by the plugin registered with Keyple Service.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="implement-the-solution">Implement the solution&lt;/h2>
&lt;div class="alert alert-warning">
&lt;div>
It is important to hide the internal Keyple interfaces of the &lt;strong>Plugin API&lt;/strong> from the client application.
&lt;/div>
&lt;/div>
&lt;p>For this purpose, it is suggested to respect the following programming pattern based on the use of:&lt;/p>
&lt;ul>
&lt;li>public interfaces,&lt;/li>
&lt;li>private interfaces adapters (package visibility) accessible from a public provider/builder.
&lt;figure >
&lt;a data-fancybox="" href="../../media/learn/developer-guide/design-guides/develop_a_reader_plugin_class_diagram.svg" >
&lt;img src="../../media/learn/developer-guide/design-guides/develop_a_reader_plugin_class_diagram.svg" alt="" >
&lt;/a>
&lt;/figure>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-note">
&lt;div>
It is possible to use other alternatives to the factory provider depending on the need.
For example, if the plugin factory needs to expose specific configuration methods, it is recommended to use the builder pattern instead of the provider pattern in order to get a properly initialized factory.
Thus, the factory does not expose any method.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="api">API&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://eclipse.github.io/keyple-common-java-api" target="_blank" rel="noopener">Keyple Common API&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://eclipse.github.io/keyple-plugin-java-api" target="_blank" rel="noopener">Keyple Plugin API&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="download">Download&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://keyple.org/components-java/overview/configuration-wizard/">Java components&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Card Extension Add-on Developer Guide</title><link>https://keyple.org/learn/developer-guide/card-extension-add-on/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keyple.org/learn/developer-guide/card-extension-add-on/</guid><description>&lt;hr>
&lt;div class="alert alert-note">
&lt;div>
Coming soon
&lt;/div>
&lt;/div></description></item></channel></rss>